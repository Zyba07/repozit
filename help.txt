# Git
- ПОСЛЕДОВАТЕЛЬНОСТЬ

-Проверка статуса репозитория.
``````````````````````````````
-git status

Добавление изменений/добавление в отслеживаемые отдельного файла.
`````````````````````````````````````````````````````````````````
git add <path/to/file>

Добавление изменений/добавление в отслеживаемые всех файлов. 
````````````````````````````````````````````````````````````
git add .

Добавление (индексация) измененных и удаленных файлов, без новых файлов. 
````````````````````````````````````````````````````````````````````````
git add -u

Команда, которая создает коммит с указанным комментарием. По умолчанию команда git commit открывает локально настроенный текстовый редактор с предложением ввести комментарий к коммиту
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
git commit -m 'commit description'

Команда git push используется для выгрузки содержимого локального репозитория в удаленный репозиторий
`````````````````````````````````````````````````````````````````````````````````````````````````````
git push

.gitignore – это обычный текстовый файл, который содержит список всех указанных файлов и папок проекта,
    которые Git должен игнорировать и не отслеживать.
`````````````````````````````````````````````````````````````````````````````````````````````````````````
__name__ == '__main__' - все строки, которые находятся в блоке if __name__ == '__main__'
    не выполняются при импорте.
    Переменная __name__ - это специальная переменная, которая будет равна "__main__",
    только если файл запускается как основная программа,
    и выставляется равной имени модуля при импорте модуля.
```````````````````````````````````````````````````````````````````````````````````````````


# Cпособ определить свое местонахождение в файловой системе – использовать команду «pwd».
`````````````````````````````````````````````````````````````````````````````````````````
pwd

# Чтобы просмотреть файлы и каталоги, находящиеся в текущем каталоге, нужно использовать команду ls
```````````````````````````````````````````````````````````````````````````````````````````````````
ls

# Для перемещения по файловой иерархии используется команда cd, которая расшифровывается как «change directories».
``````````````````````````````````````````````````````````````````````````````````````````````````````````````````
cd

CV2.
""""""
C:\cod\venvs\cv\Scripts\Activate.ps1 - активация виртуального окружения cv2
````````````````````````````````````````````````````````````````````````````
python -m pip install имя_файла - установка пакета\библиотеки в окружение
``````````````````````````````````````````````````````````````````````````
.shape - размеры массива, его форма. Это кортеж натуральных чисел, показывающий длину массива по каждой оси.
    В случае цветного изображения это трехмерный массив строк(height) x столбец(width) x color(3).  
    представляет собой кортеж(строка(height), столбец(width), color(3))
``````````````````````````````````````````````````````````````````````````````````````````````````````````
##ФУНКЦИИ CV2
cv2.imread() - загружает изображение из указанного файла.
`````````````````````````````````````````````````````````
cv2.imwrite() - в Python используется для сохранения изображения
```````````````````````````````````````````````````````````````
cv2.resize() - для изменения размера изображения.
    Мы можем изменить размер изображения, указав размер изображения или коэффициент масштабирования.
````````````````````````````````````````````````````````````````````````````````````````````````````
cv2.imshow() - используется для отображения изображения в окне.
    Окно автоматически подгоняется под размер изображения.
`````````````````````````````````````````````````````````````````
waitkey() - функции позволяет пользователям отображать окно в течение заданных миллисекунд 
    или до тех пор, 
    пока не будет нажата какая-либо клавиша.
````````````````````````````````````````````````````````````````````````````````````````````
cv2.circle() - нарисовать круг на изображении:
    Синтаксис следующий:cv2.circle(img, center, radius, color[,thickness [, lineType[,shift]]]) 
```````````````````````````````````````````````````````````````````````````````````````````
cv2.rectangle() - для рисования простого, объемного или заполненного вертикального прямоугольника
    синтаксис: cv2.rectangle(img, pt1, pt2, color[, thickness[,lineType[,shift]]])
`````````````````````````````````````````````````````````````````````````````````````````````````````
cv2.ellipse() - можем нарисовать эллипс на изображении
    1. cv2.ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]])  
    2. cv2.ellipse(img, box, color[, thickness[, lineType]])  
````````````````````````````````````````````````````````````````````````````````````````````````````````````
cv2.line() - для рисования линии на изображении
    cv2.line(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) 
``````````````````````````````````````````````````````````````````````````
cv2.putText() - можем написать текст на изображении
    cv2.putText(img, text, org, font, color) 
`````````````````````````````````````````````````````````````````````
cv2.polylines() - которая используется для рисования многоугольных кривых на изображении
    cv2.polyLine(img, polys, is_closed, color, thickness=1, lineType=8, shift=0) 
